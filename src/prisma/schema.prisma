// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?    // User's phone number
  gender        String?    @default("male") // "male" or "female"
  role          String     @default("user") // "user", "admin"
  territoryId   String? // Reference to territory (dropdown)
  territory     Dropdown?  @relation("UserTerritory", fields: [territoryId], references: [id], onDelete: SetNull)
  functions     Dropdown[] @relation("UserFunctions")
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[] // Relation to transactions
  sentTransactions     Transaction[] @relation("TransactionSender")
  receivedTransactions Transaction[] @relation("TransactionReceiver")
  createdGoals         MoneyGoal[]   @relation("GoalCreator") // Goals created by this user
  contributions        MoneyGoalContribution[] @relation("GoalContributor") // Contributions made by this user
  createdEvents        Event[]       @relation("EventCreator") // Events created by this user
  eventAttendances     EventAttendee[] @relation("EventAttendee") // Events this user is attending
  eventReminders       EventReminder[] @relation("EventReminder") // Reminders for this user
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([territoryId])
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for NextAuth sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Dropdown model for managing dropdown values
model Dropdown {
  id            String     @id @default(cuid())
  name          String // Default name
  nameFr        String? // French name
  nameMg        String? // Malagasy name
  key           String? // Unique identifier key for parent dropdowns
  isParent      Boolean    @default(false) // True if it is a parent type
  parentId      String? // Reference to parent dropdown ID
  parent        Dropdown?  @relation("DropdownHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children      Dropdown[] @relation("DropdownHierarchy")
  users         User[]     @relation("UserTerritory") // Users who have this as territory
  userFunctions User[]     @relation("UserFunctions") // Users who have this as function
  transactions  Transaction[] @relation("TransactionType") // Transactions with this type
  events        Event[]    @relation("EventCategory") // Events with this category
  isEnabled     Boolean    @default(true) // Whether the dropdown is enabled
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([key]) // Make key field unique when not null
  @@index([parentId]) // Index for faster parent lookup
}

// Transaction model for financial transactions
model Transaction {
  id               String   @id @default(cuid())
  amount           Float    // Amount of the transaction
  type             String   // "credit" or "debit" 
  reason           String?   // Reason for the transaction
  userId           String   // ID of the user associated with the transaction
  user             User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  senderId         String?   // ID of the sender (optional)
  sender           User?    @relation("TransactionSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiverId       String?   // ID of the receiver (optional)
  receiver         User?    @relation("TransactionReceiver", fields: [receiverId], references: [id], onDelete: SetNull)
  transactionTypeId String?  // ID of the transaction type (dropdown)
  transactionType   Dropdown? @relation("TransactionType", fields: [transactionTypeId], references: [id], onDelete: SetNull)
  moneyGoalId      String?   // ID of the associated money goal (optional)
  moneyGoal        MoneyGoal? @relation("TransactionMoneyGoal", fields: [moneyGoalId], references: [id], onDelete: SetNull)
  siteBalanceId    String?   @unique  // ID of the associated site balance
  siteBalance      SiteBalance? @relation(fields: [siteBalanceId], references: [id])
  goalContribution MoneyGoalContribution? // Optional link to the contribution created from this transaction
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([senderId])
  @@index([receiverId])
  @@index([transactionTypeId])
  @@index([moneyGoalId])
  @@index([siteBalanceId])
}

// SiteBalance model for tracking financial balance
model SiteBalance {
  id        String   @id @default(cuid())
  amount    Float    @default(0)    // Current balance amount
  transaction Transaction?  // Relation to the transaction that created this balance
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// MoneyGoalCategory model for categorizing money goals
model MoneyGoalCategory {
  id          String      @id @default(cuid())
  name        String      // Default name
  nameFr      String?     // French name
  nameMg      String?     // Malagasy name
  description String?     // Optional description
  color       String?     // Optional color for UI display
  icon        String?     // Optional icon identifier
  isEnabled   Boolean     @default(true)  // Whether the category is enabled
  goals       MoneyGoal[] // Goals in this category
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([isEnabled])
}

// MoneyGoal model for tracking financial goals
model MoneyGoal {
  id                String                @id @default(cuid())
  name              String                // Name of the goal
  amountGoal        Float                 // Target amount for the goal
  years             Int                   // Target year for the goal
  status            String                @default("active") // "active", "completed", "cancelled"
  categoryId        String                // ID of the category (required)
  category          MoneyGoalCategory     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdBy         String                // ID of the user who created the goal
  creator           User                  @relation("GoalCreator", fields: [createdBy], references: [id], onDelete: Restrict)
  contributions     MoneyGoalContribution[] // All contributions to this goal
  transactions      Transaction[]         @relation("TransactionMoneyGoal") // Transactions linked to this goal
  editHistory       String?               @default("[]") // JSON array of edit history for traceability
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@index([createdBy])
  @@index([years])
  @@index([status])
  @@index([categoryId])
}

// MoneyGoalContribution model for tracking amounts added to goals
model MoneyGoalContribution {
  id            String       @id @default(cuid())
  goalId        String       // ID of the associated goal
  goal          MoneyGoal    @relation(fields: [goalId], references: [id], onDelete: Cascade)
  amount        Float        // Amount contributed
  contributedBy String       // ID of the user who made the contribution
  contributor   User         @relation("GoalContributor", fields: [contributedBy], references: [id], onDelete: Restrict)
  transactionId String?      @unique // ID of the source transaction (optional)
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  reason        String?      // Optional reason for the contribution
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([goalId])
  @@index([contributedBy])
  @@index([transactionId])
}

// Event model for calendar functionality
model Event {
  id            String       @id @default(cuid())
  title         String       // Event title
  description   String?      // Optional event description
  startDate     DateTime     // Event start date and time
  endDate       DateTime     // Event end date and time
  location      String?      // Optional event location
  isAllDay      Boolean      @default(false) // Whether the event is all day
  color         String?      // Optional color for UI display
  isRecurring   Boolean      @default(false) // Whether the event is recurring
  recurrenceRule String?     // JSON string for recurrence pattern (RRULE-like)
  status        String       @default("confirmed") // "confirmed", "tentative", "cancelled"
  visibility    String       @default("public") // "public", "private"
  categoryId    String?      // Optional category (can use dropdown system)
  category      Dropdown?    @relation("EventCategory", fields: [categoryId], references: [id], onDelete: SetNull)
  createdBy     String       // ID of the user who created the event
  creator       User         @relation("EventCreator", fields: [createdBy], references: [id], onDelete: Restrict)
  attendees     EventAttendee[] // Users attending the event
  reminders     EventReminder[] // Reminders for the event
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([startDate])
  @@index([endDate])
  @@index([createdBy])
  @@index([categoryId])
  @@index([status])
}

// EventAttendee model for tracking event attendees
model EventAttendee {
  id          String   @id @default(cuid())
  eventId     String   // ID of the event
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String   // ID of the attending user
  user        User     @relation("EventAttendee", fields: [userId], references: [id], onDelete: Cascade)
  status      String   @default("pending") // "pending", "accepted", "declined", "tentative"
  isOrganizer Boolean  @default(false) // Whether this attendee is an organizer
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([eventId, userId]) // Prevent duplicate attendees
  @@index([eventId])
  @@index([userId])
}

// EventReminder model for event reminders
model EventReminder {
  id           String   @id @default(cuid())
  eventId      String   // ID of the event
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String   // ID of the user to remind
  user         User     @relation("EventReminder", fields: [userId], references: [id], onDelete: Cascade)
  reminderTime DateTime // When to send the reminder
  type         String   @default("notification") // "notification", "email", "sms"
  isSent       Boolean  @default(false) // Whether the reminder has been sent
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([eventId])
  @@index([userId])
  @@index([reminderTime])
  @@index([isSent])
}
