// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?    // User's phone number
  gender        String?    @default("male") // "male" or "female"
  role          String     @default("user") // "user", "admin"
  territoryId   String? // Reference to territory (dropdown)
  territory     Dropdown?  @relation("UserTerritory", fields: [territoryId], references: [id], onDelete: SetNull)
  functions     Dropdown[] @relation("UserFunctions")
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[] // Relation to transactions
  sentTransactions     Transaction[] @relation("TransactionSender")
  receivedTransactions Transaction[] @relation("TransactionReceiver")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([territoryId])
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for NextAuth sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Dropdown model for managing dropdown values
model Dropdown {
  id            String     @id @default(cuid())
  name          String // Default name
  nameFr        String? // French name
  nameMg        String? // Malagasy name
  key           String? // Unique identifier key for parent dropdowns
  isParent      Boolean    @default(false) // True if it is a parent type
  parentId      String? // Reference to parent dropdown ID
  parent        Dropdown?  @relation("DropdownHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children      Dropdown[] @relation("DropdownHierarchy")
  users         User[]     @relation("UserTerritory") // Users who have this as territory
  userFunctions User[]     @relation("UserFunctions") // Users who have this as function
  transactions  Transaction[] @relation("TransactionType") // Transactions with this type
  isEnabled     Boolean    @default(true) // Whether the dropdown is enabled
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([key]) // Make key field unique when not null
  @@index([parentId]) // Index for faster parent lookup
}

// Transaction model for financial transactions
model Transaction {
  id               String   @id @default(cuid())
  amount           Float    // Amount of the transaction
  type             String   // "credit" or "debit" 
  reason           String?   // Reason for the transaction
  userId           String   // ID of the user associated with the transaction
  user             User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  senderId         String?   // ID of the sender (optional)
  sender           User?    @relation("TransactionSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiverId       String?   // ID of the receiver (optional)
  receiver         User?    @relation("TransactionReceiver", fields: [receiverId], references: [id], onDelete: SetNull)
  transactionTypeId String?  // ID of the transaction type (dropdown)
  transactionType   Dropdown? @relation("TransactionType", fields: [transactionTypeId], references: [id], onDelete: SetNull)
  siteBalanceId    String?   @unique  // ID of the associated site balance
  siteBalance      SiteBalance? @relation(fields: [siteBalanceId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([senderId])
  @@index([receiverId])
  @@index([transactionTypeId])
  @@index([siteBalanceId])
}

// SiteBalance model for tracking financial balance
model SiteBalance {
  id        String   @id @default(cuid())
  amount    Float    @default(0)    // Current balance amount
  transaction Transaction?  // Relation to the transaction that created this balance
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
